{"instances": {"application":{},"Header/0-0-0-0":{"expanded":false,"locale":"en-US","i18n":{"home":{"title":"Nullstack","href":"/"},"links":[{"title":"Documentation","href":"/getting-started"},{"title":"Components","href":"/components"},{"title":"Contributors","href":"/contributors"},{"title":"Waifu","href":"/waifu"}],"action":{"title":"Get Started","href":"/getting-started"},"language":{"title":"PortuguÃªs","href":"/pt-br"},"mode":{"dark":"Night Mode","light":"Day Mode"}}},"Article/0-0-0-12/full-stack-lifecycle":{"title":"Full-Stack Lifecycle","html":"<p>Lifecycle methods are special named functions that you can declare in the class.<\/p>\n<p>Each lifecycle method runs in a specific order in a queue so it's guaranteed that all components initiated in that cycle will be prepared before the first one is initiated.<\/p>\n<h2 id=\"prepare\"><a href=\"#prepare\">Prepare<\/a><\/h2><p>This method is blocking and runs before the first time the component is rendered.<\/p>\n<p>You can use this function to set the state that the user will see before things are loaded.<\/p>\n<p>If the user is entering from this route <code>prepare<\/code> will run in the server before Nullstack <a href=\"/server-side-rendering\">server-side renders<\/a> your application.<\/p>\n<p>If the user is navigating from another route this method will run in the client.<\/p>\n<pre><code class=\"language-jsx\"><span class=\"token keyword\">import<\/span> Nullstack <span class=\"token keyword\">from<\/span> <span class=\"token string\">'nullstack'<\/span><span class=\"token punctuation\">;<\/span>\n\n<span class=\"token keyword\">class<\/span> <span class=\"token class-name\">Component<\/span> <span class=\"token keyword\">extends<\/span> <span class=\"token class-name\">Nullstack<\/span> <span class=\"token punctuation\">{<\/span>\n\n  <span class=\"token comment\">// ...<\/span>\n\n  <span class=\"token function\">prepare<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span>\n    <span class=\"token keyword\">this<\/span><span class=\"token punctuation\">.<\/span>date <span class=\"token operator\">=<\/span> <span class=\"token keyword\">new<\/span> <span class=\"token class-name\">Date<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n  <span class=\"token punctuation\">}<\/span>\n\n  <span class=\"token comment\">// ...<\/span>\n\n<span class=\"token punctuation\">}<\/span>\n\n<span class=\"token keyword\">export<\/span> <span class=\"token keyword\">default<\/span> Component<span class=\"token punctuation\">;<\/span>\n<\/code><\/pre>\n<h2 id=\"initiate\"><a href=\"#initiate\">Initiate<\/a><\/h2><p>This method can be async and runs right after the component is prepared and rendered for the first time.<\/p>\n<p>You can use this function to invoke another server function and load the data to present the page.<\/p>\n<p>If the user is entering from this route <code>initiate<\/code> will run in the server.<\/p>\n<p>Nullstack will wait till the promise is resolved and then finally generate the HTML that will be served.<\/p>\n<p>If the user is navigating from another route this method will run in the client.<\/p>\n<pre><code class=\"language-jsx\"><span class=\"token keyword\">import<\/span> Nullstack <span class=\"token keyword\">from<\/span> <span class=\"token string\">'nullstack'<\/span><span class=\"token punctuation\">;<\/span>\n\n<span class=\"token keyword\">class<\/span> <span class=\"token class-name\">Component<\/span> <span class=\"token keyword\">extends<\/span> <span class=\"token class-name\">Nullstack<\/span> <span class=\"token punctuation\">{<\/span>\n\n  <span class=\"token comment\">// ...<\/span>\n\n  <span class=\"token keyword\">async<\/span> <span class=\"token function\">initiate<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span>\n    <span class=\"token keyword\">this<\/span><span class=\"token punctuation\">.<\/span>task <span class=\"token operator\">=<\/span> <span class=\"token keyword\">await<\/span> <span class=\"token function\">getTaskByDay<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">{<\/span>\n      <span class=\"token literal-property property\">day<\/span><span class=\"token operator\">:<\/span> <span class=\"token keyword\">this<\/span><span class=\"token punctuation\">.<\/span>date\n    <span class=\"token punctuation\">}<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n  <span class=\"token punctuation\">}<\/span>\n\n  <span class=\"token comment\">// ...<\/span>\n\n<span class=\"token punctuation\">}<\/span>\n\n<span class=\"token keyword\">export<\/span> <span class=\"token keyword\">default<\/span> Component<span class=\"token punctuation\">;<\/span>\n<\/code><\/pre>\n<blockquote>\n<p>âœ¨ Learn more about <a href=\"/server-functions\">server functions<\/a>.<\/p>\n<\/blockquote>\n<h2 id=\"hydrate\"><a href=\"#hydrate\">Hydrate<\/a><\/h2><p>This method is async and will only run in the client.<\/p>\n<p>This method will always run no matter which environment started the component.<\/p>\n<p>This is a good place to trigger dependencies that manipulate the dom or can only run on the client-side.<\/p>\n<pre><code class=\"language-jsx\"><span class=\"token keyword\">import<\/span> Nullstack <span class=\"token keyword\">from<\/span> <span class=\"token string\">'nullstack'<\/span><span class=\"token punctuation\">;<\/span>\n\n<span class=\"token keyword\">class<\/span> <span class=\"token class-name\">Component<\/span> <span class=\"token keyword\">extends<\/span> <span class=\"token class-name\">Nullstack<\/span> <span class=\"token punctuation\">{<\/span>\n\n  <span class=\"token comment\">// ...<\/span>\n\n  <span class=\"token keyword\">async<\/span> <span class=\"token function\">hydrate<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span>\n    <span class=\"token keyword\">this<\/span><span class=\"token punctuation\">.<\/span>timer <span class=\"token operator\">=<\/span> <span class=\"token function\">setInterval<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token operator\">=><\/span> <span class=\"token punctuation\">{<\/span>\n      console<span class=\"token punctuation\">.<\/span><span class=\"token function\">log<\/span><span class=\"token punctuation\">(<\/span><span class=\"token keyword\">this<\/span><span class=\"token punctuation\">.<\/span>date<span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n    <span class=\"token punctuation\">}<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token number\">1000<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n  <span class=\"token punctuation\">}<\/span>\n\n  <span class=\"token comment\">// ...<\/span>\n\n<span class=\"token punctuation\">}<\/span>\n\n<span class=\"token keyword\">export<\/span> <span class=\"token keyword\">default<\/span> Component<span class=\"token punctuation\">;<\/span>\n<\/code><\/pre>\n<h2 id=\"update\"><a href=\"#update\">Update<\/a><\/h2><p>This method is async and will only run in the client.<\/p>\n<p>This method runs on every component anytime the application state changes.<\/p>\n<blockquote>\n<p>ðŸ”¥ Be careful not to cause infinite loopings when mutating state inside <code>update<\/code>.<\/p>\n<\/blockquote>\n<p>This will run right before rendering but will not block the rendering queue.<\/p>\n<p>The <code>update<\/code> function will not start running until the application is rendered after the <code>initiate<\/code>.<\/p>\n<pre><code class=\"language-jsx\"><span class=\"token keyword\">import<\/span> Nullstack <span class=\"token keyword\">from<\/span> <span class=\"token string\">'nullstack'<\/span><span class=\"token punctuation\">;<\/span>\n\n<span class=\"token keyword\">class<\/span> <span class=\"token class-name\">Component<\/span> <span class=\"token keyword\">extends<\/span> <span class=\"token class-name\">Nullstack<\/span> <span class=\"token punctuation\">{<\/span>\n\n  <span class=\"token comment\">// ...<\/span>\n\n  <span class=\"token keyword\">async<\/span> <span class=\"token function\">update<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span>\n    <span class=\"token keyword\">const<\/span> today <span class=\"token operator\">=<\/span> <span class=\"token keyword\">new<\/span> <span class=\"token class-name\">Date<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n    <span class=\"token keyword\">if<\/span><span class=\"token punctuation\">(<\/span>today<span class=\"token punctuation\">.<\/span><span class=\"token function\">getDay<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token operator\">!=<\/span> <span class=\"token keyword\">this<\/span><span class=\"token punctuation\">.<\/span>date<span class=\"token punctuation\">.<\/span><span class=\"token function\">getDay<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span>\n      <span class=\"token keyword\">this<\/span><span class=\"token punctuation\">.<\/span>date <span class=\"token operator\">=<\/span> today<span class=\"token punctuation\">;<\/span>\n      <span class=\"token keyword\">await<\/span> <span class=\"token keyword\">this<\/span><span class=\"token punctuation\">.<\/span><span class=\"token function\">initiate<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n    <span class=\"token punctuation\">}<\/span>\n  <span class=\"token punctuation\">}<\/span>\n\n  <span class=\"token comment\">// ...<\/span>\n\n<span class=\"token punctuation\">}<\/span>\n\n<span class=\"token keyword\">export<\/span> <span class=\"token keyword\">default<\/span> Component<span class=\"token punctuation\">;<\/span>\n<\/code><\/pre>\n<blockquote>\n<p>âœ¨ Lifecycle methods have no special side effects, you can call them manually without causing problems.<\/p>\n<\/blockquote>\n<h2 id=\"terminate\"><a href=\"#terminate\">Terminate<\/a><\/h2><p>This method is async and will only run in the client.<\/p>\n<p>This method will run after your component leaves the DOM.<\/p>\n<p>This is the place to clean up whatever you set up in the <code>hydrate<\/code> method.<\/p>\n<p>The instance will be garbage collected after the <code>Promise<\/code> is resolved.<\/p>\n<pre><code class=\"language-jsx\"><span class=\"token keyword\">import<\/span> Nullstack <span class=\"token keyword\">from<\/span> <span class=\"token string\">'nullstack'<\/span><span class=\"token punctuation\">;<\/span>\n\n<span class=\"token keyword\">class<\/span> <span class=\"token class-name\">Component<\/span> <span class=\"token keyword\">extends<\/span> <span class=\"token class-name\">Nullstack<\/span> <span class=\"token punctuation\">{<\/span>\n\n  <span class=\"token comment\">// ...<\/span>\n\n  <span class=\"token keyword\">async<\/span> <span class=\"token function\">terminate<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span>\n    <span class=\"token function\">clearInterval<\/span><span class=\"token punctuation\">(<\/span><span class=\"token keyword\">this<\/span><span class=\"token punctuation\">.<\/span>timer<span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n  <span class=\"token punctuation\">}<\/span>\n\n  <span class=\"token comment\">// ...<\/span>\n\n<span class=\"token punctuation\">}<\/span>\n\n<span class=\"token keyword\">export<\/span> <span class=\"token keyword\">default<\/span> Component<span class=\"token punctuation\">;<\/span>\n<\/code><\/pre>\n<h2 id=\"next-steps\"><a href=\"#next-steps\">Next steps<\/a><\/h2><p>âš” Learn about <a href=\"/server-functions\">server functions<\/a>.<\/p>\n","description":"Lifecycle methods are special named functions that you can declare in the class.","topics":[{"title":"Core concepts","links":[{"title":"Getting started","href":"/getting-started"},{"title":"Renderable components","href":"/renderable-components"},{"title":"Stateful components","href":"/stateful-components"},{"title":"Full-stack lifecycle","href":"/full-stack-lifecycle"},{"title":"Server functions","href":"/server-functions"},{"title":"Context","href":"/context"},{"title":"Routes and params","href":"/routes-and-params"},{"title":"Two-way bindings","href":"/two-way-bindings"}]},{"title":"Advanced concepts","links":[{"title":"Application Startup","href":"/application-startup"},{"title":"Functional Components","href":"/functional-components"},{"title":"Persistent Components","href":"/persistent-components"},{"title":"Context data","href":"/context-data"},{"title":"Context instances","href":"/context-instances"},{"title":"Context environment","href":"/context-environment"},{"title":"Context page","href":"/context-page"},{"title":"Context project","href":"/context-project"},{"title":"Context settings","href":"/context-settings"},{"title":"Context secrets","href":"/context-secrets"},{"title":"Instance self","href":"/instance-self"},{"title":"Server request and response","href":"/server-request-and-response"},{"title":"Styles","href":"/styles"},{"title":"NJS file extension","href":"/njs-file-extension"},{"title":"Service Worker","href":"/service-worker"},{"title":"How to deploy","href":"/how-to-deploy-a-nullstack-application"}]},{"title":"Build Modes","links":[{"title":"Server-side rendering","href":"/server-side-rendering"},{"title":"Static site generation","href":"/static-site-generation"},{"title":"Single page applications","href":"/single-page-applications"}]},{"title":"Examples","links":[{"title":"How to use MongoDB","href":"/how-to-use-mongodb-with-nullstack"},{"title":"How to use Google Analytics","href":"/how-to-use-google-analytics-with-nullstack"},{"title":"How to use Facebook Pixel","href":"/how-to-use-facebook-pixel-with-nullstack"}]}]},"GoogleAnalytics/0-0-0-13":{},"Loader/0-0-0-15":{},"Footer/0-0-0-16":{"locale":"en-US","i18n":{"links":[{"title":"YouTube","href":"https://www.youtube.com/channel/UCUNPaxoppH3lu6JTrUX78Ww"},{"title":"Twitter","href":"https://twitter.com/nullstackapp"},{"title":"GitHub","href":"https://github.com/nullstack"}],"star":{"story":"Want to show your love and help us spread the word?","action":"Leave a star on GitHub"}}}}, "page": {"image":"/image-1200x630.png","status":200,"title":"Full-Stack Lifecycle - Nullstack","description":"Lifecycle methods are special named functions that you can declare in the class."}}